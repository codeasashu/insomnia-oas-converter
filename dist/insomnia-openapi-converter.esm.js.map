{"version":3,"file":"insomnia-openapi-converter.esm.js","sources":["../src/utils/index.ts","../src/exporter.ts","../src/collector.ts","../src/schema.ts"],"sourcesContent":["import {\n  InsomniaResource,\n  InsomniaRequest,\n  Parameter,\n} from '../types/insomnia';\n\nconst insomniaTemplateRegex = /(?<!\\\\){([^{}]+)(?<!\\\\)}/g;\n\nexport const types = {\n  REQUEST: 'request',\n  FOLDER: 'request_group',\n  ENVIRONMENT: 'environment',\n  WORKSPACE: 'workspace',\n  COOKIE: 'cookie_jar',\n  SPEC: 'api_spec',\n};\n\nconst regexes = {\n  workspace: RegExp(/^wrk_[\\w]+$/, 'g'),\n  folder: RegExp(/^fld_[\\w]+$/, 'g'),\n  environment: RegExp(/^env_[\\w]+$/, 'g'),\n};\n\nexport const headerTypes = {\n  JSON: 'application/json',\n  MULTIPART: 'multipart/form-data',\n  FORM: 'application/x-www-form-urlencoded',\n};\n\nexport const getRequestFromFolder = (\n  resource: InsomniaResource,\n  resources: InsomniaResource[]\n): InsomniaRequest | null => {\n  let foundRequests = resources.filter((r) => r.parentId == resource._id);\n  if (foundRequests.length) {\n    return <InsomniaRequest>foundRequests.pop();\n  }\n  return null;\n};\n\nexport const filterRequestResource = (resource: InsomniaResource): boolean => {\n  return resource._type == types.REQUEST;\n};\n\nexport const isWorkspace = (resourceId: string): boolean =>\n  regexes.workspace.test(resourceId);\n\nexport const isFolder = (resourceId: string): boolean =>\n  regexes.folder.test(resourceId);\n\nexport const getQueryStringParams = (query: string) => {\n  return query\n    ? (/^[?#]/.test(query) ? query.slice(1) : query)\n        .split('&')\n        .reduce((params: any, param) => {\n          // @TODO Fix this \"any\" type\n          let [key, value] = param.split('=');\n          params[key] = value\n            ? decodeURIComponent(value.replace(/\\+/g, ' '))\n            : '';\n          return params;\n        }, {})\n    : {};\n};\n\nexport const getTemplateMatches = (\n  variable: string | number\n): Array<string> => {\n  variable = variable.toString();\n  let matches = variable.matchAll(insomniaTemplateRegex);\n  return Array.from(matches).map((m) => m[1].trim());\n};\n\n/**\n * Converts insomnia defined variable holders to openapi variables\n * {{ xyz }} -> { xyz }\n * @param uri string The url to replace the variable\n */\nexport const trimTemplate = (\n  variable: string | number,\n  keepInsomniaFormat: boolean = false\n): string => {\n  variable = variable.toString();\n  // console.log(\"trim1\", variable)\n  let matches = variable.matchAll(insomniaTemplateRegex);\n  for (let match of matches) {\n    let trimmedMatch = match[0].replace('{', '').replace('}', '').trim();\n    let replaceWith = !!keepInsomniaFormat ? `{${trimmedMatch}}` : trimmedMatch;\n    variable = variable.replace(match[0], replaceWith);\n  }\n  return variable;\n};\n\nexport const replaceInsomniaTemplateWithVars = (\n  variable: string | number,\n  envVars: any = {}\n): string => {\n  variable = variable.toString();\n  let matches = variable.matchAll(insomniaTemplateRegex);\n  for (let match in matches) {\n    const trimmedMatch = match[1].trim();\n    variable = variable.replace(match[0], envVars[trimmedMatch] || match[0]);\n  }\n  return variable;\n};\n\nexport const hasHttp = (path: string): boolean =>\n  path.includes('http://') || path.includes('https://');\n\n/**\n * Get a URL instance from insomnia url\n * @param path\n */\nexport const urlFromPath = (path: string): URL => {\n  if (hasHttp(path) === false) {\n    path = `http://${path}`;\n  }\n  return new URL(trimTemplate(path));\n};\n\nexport const parameterizeForm = (\n  insomniaFormParams: Parameter[]\n): {\n  [key: string]: string;\n} => {\n  let bodyParams: any = {};\n  for (let param of insomniaFormParams) {\n    bodyParams[param.name] = param.value;\n  }\n  return bodyParams;\n};\n\nexport const sanitizeRequestMethod = (method: string): string =>\n  method.toLowerCase().trim();\n","import { OpenApiBuilder, OpenAPIObject } from 'openapi3-ts';\nconst yaml = require('js-yaml');\n\nclass SpecExporter {\n  spec: OpenApiBuilder;\n\n  constructor(spec: OpenApiBuilder) {\n    this.spec = spec;\n  }\n\n  as_yaml(): string {\n    return yaml.dump(this.as_dict());\n  }\n\n  as_json(formatted: Boolean): string {\n    const specjson = this.spec.getSpecAsJson();\n    if(formatted === true) {\n      try{\n        return JSON.stringify(JSON.parse(specjson), null, 2);\n      } catch(error) {\n        console.warn('[JSONss parseerror]', error)\n        return specjson;\n      }\n    }\n    return specjson;\n  }\n\n  as_dict(): OpenAPIObject {\n    return this.spec.getSpec();\n  }\n}\n\nexport default SpecExporter;\n","import * as insomnia from './types/insomnia';\nimport * as oas from 'openapi3-ts';\nimport * as utils from './utils';\nimport SpecExporter from './exporter';\n\nvar GenerateSchema = require('generate-schema');\n\nconst insoRequestIdKey = 'x-request-id';\n\nclass OpenapiCollector {\n  builder: oas.OpenApiBuilder;\n  envVars: any = {};\n\n  constructor() {\n    this.builder = new oas.OpenApiBuilder();\n  }\n\n  addInfo(config: insomnia.InsomniaConfig): this {\n    this.builder.addTitle(config.title);\n    this.builder.addDescription(config.description);\n    this.builder.addVersion(config.version);\n    this.add_url(config.baseUrl);\n    return this;\n  }\n\n  getRequestFromOas(path: string, method: string): oas.OperationObject | null {\n    let oasPath = oas.getPath(this.builder.rootDoc.paths, path);\n    return (oasPath && oasPath[method]) || null;\n  }\n\n  addFolderToRequest(\n    folder: insomnia.InsomniaFolder,\n    request: insomnia.InsomniaRequest | null\n  ): this {\n    if (request) {\n      let folderName: oas.TagObject = { name: folder.name };\n      this.builder.addTag(folderName);\n      this.updateRequest(request, { tags: [folderName['name']] });\n    }\n    return this;\n  }\n\n  addEnvironment(env: insomnia.InsomniaEnvironment): this {\n    this.envVars = { ...this.envVars, ...env };\n    return this;\n  }\n\n  updateRequest(request: insomnia.InsomniaRequest, args: any): void {\n    let sanitizedMethod = utils.sanitizeRequestMethod(request.method);\n    let { path } = this.get_path_pathparams(request.url);\n    let oasRequest = this.getRequestFromOas(path, sanitizedMethod);\n    if (oasRequest) {\n      let pathObject: oas.PathItemObject = {\n        [sanitizedMethod]: Object.assign({}, oasRequest, { ...args }),\n      };\n      this.builder.addPath(path, pathObject);\n    }\n  }\n\n  get_path_pathparams(\n    url: string\n  ): {\n    path: string;\n    params: oas.ParameterObject[];\n  } {\n    let pathInfo = this._get_oas_pathparams(url);\n    if (pathInfo === null) {\n      throw Error('Valid path is missing from request!');\n    }\n    return {\n      path: pathInfo.path,\n      params: pathInfo.params,\n    };\n  }\n\n  addRequest(request: insomnia.InsomniaRequest): this {\n    let pathItem: oas.PathItemObject = {\n      summary: request.name,\n      description: request.description,\n    };\n\n    let methodName = utils.sanitizeRequestMethod(request.method);\n    let headers = this.insomnia_to_oas_params(request.headers, 'header');\n    let pathInfo = this.get_path_pathparams(request.url);\n    let queryParams = this.get_query_params(request);\n\n    pathItem[methodName] = {\n      parameters: [...headers, ...pathInfo.params, ...queryParams],\n    };\n\n    // If request belongs to folder\n    // if(request.parentId && isFolder(request.parentId)) {\n    //     // @TODO Use folder name instead of folder ids\n    //     pathItem[methodName]['tags'] = [request.parentId]\n    // }\n\n    // Reference request Id\n    pathItem[methodName][insoRequestIdKey] = request._id;\n\n    // If the request has a non-empty body\n    if (Object.keys(request.body).length !== 0) {\n      pathItem[methodName].requestBody = this.get_request_body(request.body);\n    }\n\n    // Add the responses\n    let responses = this.get_responses(request.examples);\n    pathItem[methodName].responses = responses;\n\n    this.builder.addPath(pathInfo.path, pathItem);\n\n    // Add request body\n    return this;\n  }\n\n  get_responses(examples: insomnia.ResponseExample[]): oas.ResponsesObject {\n    let oasResponsesBody = <oas.ResponsesObject>{};\n    let oasResponseBody = { content: <oas.ResponseObject>{} };\n\n    for (let example of examples) {\n      // A base schema without any body\n      let schema;\n      let exampleBody = example.body;\n      if (example.contentType === utils.headerTypes.JSON) {\n        let body = '';\n        try {\n          body = JSON.parse(exampleBody);\n        } catch (e) {\n          console.info(\n            'Response :: Error parsing json body. Using string instead'\n          );\n          body = exampleBody;\n        } finally {\n          schema = this._get_schema(body);\n        }\n      } else {\n        schema = this._get_schema(exampleBody);\n      }\n\n      // Make a copy\n      let responseObject = Object.assign(\n        {},\n        oasResponseBody['content'][example.contentType]\n      );\n\n      let existingSchema = responseObject && responseObject.schema;\n\n      // Use oneOf is there is existing schema for this contentType and\n      // status code\n      responseObject.schema = !!existingSchema\n        ? {\n            oneOf: [...schema, ...existingSchema],\n          }\n        : schema;\n\n      let exampleObj = { [example.id]: example.body };\n\n      responseObject.examples = {\n        ...exampleObj,\n        ...responseObject.examples,\n      };\n\n      oasResponseBody['content'][example.contentType] = responseObject;\n      oasResponsesBody[example.statusCode.toString()] = oasResponseBody;\n    }\n\n    return oasResponsesBody;\n  }\n\n  get_request_body(requestBody: any): oas.RequestBodyObject {\n    let oasRequestBody = { content: <oas.SchemaObject>{} };\n\n    // A base schema without any body\n    let schema, exampleBody;\n\n    // JSON Type\n    if (requestBody.mimeType === utils.headerTypes.JSON) {\n      let jsonBody = {};\n      try {\n        jsonBody = JSON.parse(requestBody.text);\n      } catch (e) {\n        // JSON parse error\n        console.info(\n          'RequestBody :: Error parsing json body. Using string instead'\n        );\n        jsonBody = requestBody.text;\n      } finally {\n        schema = this._get_schema(jsonBody);\n        exampleBody = jsonBody;\n      }\n    } else if (\n      // Form type\n      requestBody.mimeType === utils.headerTypes.FORM ||\n      requestBody.mimeType === utils.headerTypes.MULTIPART\n    ) {\n      let bodyParams = utils.parameterizeForm(requestBody.params);\n      // @TODO beware: filetype uploads are not yet implemented\n      schema = this._get_schema(bodyParams);\n      exampleBody = bodyParams;\n    } else {\n      schema = { additionalProperties: true };\n      exampleBody = requestBody['text'] || requestBody['params'] || {};\n    }\n\n    oasRequestBody['content'][requestBody.mimeType] = {\n      schema,\n      example: exampleBody,\n    };\n\n    return oasRequestBody;\n  }\n\n  get_query_params(request: insomnia.InsomniaRequest): oas.ParameterObject[] {\n    let queryParamsFromurl = this._get_oas_query_params_from_url(request.url);\n    let queryParamsFromParams = this.insomnia_to_oas_params(\n      request.parameters,\n      'query'\n    );\n\n    let urlQueryNames = queryParamsFromurl.map((q) => q.name);\n\n    // pick only those which arent already found in query params\n    let queryParams = queryParamsFromParams.filter(\n      (q) => urlQueryNames.indexOf(q.name) === -1\n    );\n\n    return [...queryParamsFromurl, ...queryParams];\n  }\n\n  _get_from_env(key: any): any {\n    if (this.envVars[key]) return this.envVars[key];\n    return null;\n  }\n\n  add_url(url: string): this {\n    if (utils.hasHttp(url) === false) {\n      return this;\n    }\n\n    const servers = this.builder.rootDoc.servers;\n    if (!servers) {\n      this.builder.addServer({ url });\n      return this;\n    }\n\n    const hasPath = servers.filter((s) => s.url === url);\n    if (hasPath.length === 0) this.builder.addServer({ url });\n    return this;\n  }\n\n  _get_oas_pathparams(\n    uri: string\n  ): {\n    path: string;\n    params: oas.ParameterObject[];\n  } | null {\n    let parsedPath: string = '';\n    let parsedPathParams = [];\n    try {\n      const path = utils.urlFromPath(uri);\n\n      // Add url to host if it is a quialified url\n      this.add_url(path.origin);\n\n      parsedPath = decodeURIComponent(path.pathname);\n      let pathParams = utils.getTemplateMatches(parsedPath);\n      for (let p of pathParams) {\n        parsedPathParams.push(<oas.ParameterObject>{\n          name: p,\n          in: 'path',\n          example: utils.replaceInsomniaTemplateWithVars(p, this.envVars),\n          schema: this._get_schema(p),\n        });\n      }\n    } catch (e) {\n      console.error(e);\n      // @TODO use regex to parse\n      return null;\n    }\n    return { path: parsedPath, params: parsedPathParams };\n  }\n\n  insomnia_to_oas_params(\n    insomniaParams: insomnia.Parameter[],\n    _in: string\n  ): oas.ParameterObject[] {\n    let params = [];\n    for (let param of insomniaParams) {\n      if (param.name && param.name != '') {\n        const _key = utils.replaceInsomniaTemplateWithVars(\n          param.name,\n          this.envVars\n        );\n        const _value = utils.replaceInsomniaTemplateWithVars(\n          param.value,\n          this.envVars\n        );\n        let _param = <oas.ParameterObject>{\n          name: _key,\n          in: _in,\n          example: _value,\n          schema: this._get_schema(_value),\n        };\n        params.push(_param);\n      }\n    }\n    return params;\n  }\n\n  _get_oas_query_params_from_url(path: string): oas.ParameterObject[] {\n    let params = [];\n    try {\n      const url = utils.urlFromPath(path);\n      for (const [key, value] of url.searchParams) {\n        params.push(<insomnia.Parameter>{\n          name: decodeURIComponent(key),\n          value: decodeURIComponent(value),\n        });\n      }\n    } catch (e) {\n      // @TODO use regex to parse\n    } finally {\n      return this.insomnia_to_oas_params(params, 'query');\n    }\n  }\n\n  _get_schema(inputJsonObject: any) {\n    let { title, $schema, ...schema } = GenerateSchema.json(\n      'insomnia',\n      inputJsonObject\n    );\n    return schema;\n  }\n\n  get_spec(): SpecExporter {\n    return new SpecExporter(this.builder);\n  }\n}\n\nexport default OpenapiCollector;\n","import * as types from './types/insomnia';\nimport OpenapiCollector from './collector';\nimport * as utils from './utils';\nimport SpecExporter from './exporter';\n\nclass SchemaPack {\n  config = {\n    title: 'Api',\n    description: '',\n    version: '1.0.0',\n    baseUrl: 'http://example.tld',\n  };\n\n  validated = false;\n  validationResult = {};\n\n  collector!: OpenapiCollector;\n\n  json = {\n    _type: 'export',\n    __export_format: 4,\n    __export_date: new Date().toString(),\n    __export_source: 'openapi-converter-plugin',\n    resources: <types.InsomniaResource[]>[],\n  };\n\n  constructor(json: types.InsomniaExport, config: any) {\n    this.json = json;\n    this.config = this.getConfig(config);\n    this.validated = false;\n    this.validationResult = {};\n  }\n\n  getConfig(config: any): types.InsomniaConfig {\n    config = Object.assign({}, config || {});\n    return { ...this.config, ...config };\n  }\n\n  getInsomniaResources(): types.InsomniaResource[] {\n    return this.sortInsomniaResources(this.json.resources);\n  }\n\n  sortInsomniaResources(\n    resources: types.InsomniaResource[]\n  ): types.InsomniaResource[] {\n    let environment = resources.filter(\n      (r) => r._type == utils.types.ENVIRONMENT\n    );\n    let requests = resources.filter((r) => r._type == utils.types.REQUEST);\n    let folders = resources.filter((r) => r._type == utils.types.FOLDER);\n    let workspaces = resources.filter((r) => r._type == utils.types.WORKSPACE);\n    let cookies = resources.filter((r) => r._type == utils.types.COOKIE);\n    let specs = resources.filter((r) => r._type == utils.types.SPEC);\n\n    // env > req > folder > workspace\n    return [\n      ...environment,\n      ...requests,\n      ...folders,\n      ...workspaces,\n      ...cookies,\n      ...specs,\n    ];\n  }\n\n  convert(): SpecExporter | null {\n    this.collector = new OpenapiCollector();\n\n    // Add openapi info\n    this.collector.addInfo(this.config);\n    // Json to insomnia classes\n    let resources = this.getInsomniaResources();\n\n    for (let resource of resources) {\n      if (resource._type == utils.types.FOLDER) {\n        let linkedRequest = utils.getRequestFromFolder(resource, resources);\n        // We add the folder only if it is directly linked to request\n        if (linkedRequest !== null)\n          this.collector.addFolderToRequest(\n            <types.InsomniaFolder>resource,\n            linkedRequest\n          );\n      }\n\n      if (resource._type == utils.types.ENVIRONMENT) {\n        this.collector.addEnvironment(<types.InsomniaEnvironment>resource);\n      }\n\n      if (resource._type == utils.types.REQUEST) {\n        try {\n          this.collector.addRequest(<types.InsomniaRequest>resource);\n        } catch (e) {\n          this.validationResult = {\n            result: false,\n            reason: e,\n          };\n          return null;\n        }\n      }\n    }\n\n    return this.collector.get_spec();\n  }\n}\n\nexport default SchemaPack;\n"],"names":["insomniaTemplateRegex","types","REQUEST","FOLDER","ENVIRONMENT","WORKSPACE","COOKIE","SPEC","headerTypes","JSON","MULTIPART","FORM","getRequestFromFolder","resource","resources","foundRequests","filter","r","parentId","_id","length","pop","getTemplateMatches","variable","toString","matches","matchAll","Array","from","map","m","trim","trimTemplate","keepInsomniaFormat","match","trimmedMatch","replace","replaceWith","replaceInsomniaTemplateWithVars","envVars","hasHttp","path","includes","urlFromPath","URL","parameterizeForm","insomniaFormParams","bodyParams","param","name","value","sanitizeRequestMethod","method","toLowerCase","yaml","require","SpecExporter","spec","as_yaml","dump","as_dict","as_json","formatted","specjson","getSpecAsJson","stringify","parse","error","console","warn","getSpec","GenerateSchema","insoRequestIdKey","OpenapiCollector","builder","oas","addInfo","config","addTitle","title","addDescription","description","addVersion","version","add_url","baseUrl","getRequestFromOas","oasPath","rootDoc","paths","addFolderToRequest","folder","request","folderName","addTag","updateRequest","tags","addEnvironment","env","args","sanitizedMethod","utils","get_path_pathparams","url","oasRequest","pathObject","Object","assign","addPath","pathInfo","_get_oas_pathparams","Error","params","addRequest","pathItem","summary","methodName","headers","insomnia_to_oas_params","queryParams","get_query_params","parameters","keys","body","requestBody","get_request_body","responses","get_responses","examples","oasResponsesBody","oasResponseBody","content","example","schema","exampleBody","contentType","e","info","_get_schema","responseObject","existingSchema","oneOf","exampleObj","id","statusCode","oasRequestBody","mimeType","jsonBody","text","additionalProperties","queryParamsFromurl","_get_oas_query_params_from_url","queryParamsFromParams","urlQueryNames","q","indexOf","_get_from_env","key","servers","addServer","hasPath","s","uri","parsedPath","parsedPathParams","origin","decodeURIComponent","pathname","pathParams","p","push","insomniaParams","_in","_key","_value","_param","searchParams","inputJsonObject","json","get_spec","SchemaPack","_type","__export_format","__export_date","Date","__export_source","getConfig","validated","validationResult","getInsomniaResources","sortInsomniaResources","environment","requests","folders","workspaces","cookies","specs","convert","collector","linkedRequest","result","reason"],"mappings":"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"}